user  angie;
worker_processes  auto;

error_log  /logs/upstream_error;
pid        /var/run/angie.pid;

events {
    worker_connections  1024;
}

http {
    default_type  application/octet-stream;
    include       /etc/angie/mime.types;
    include prometheus_all.conf;
    server {
        listen 9000 ssl http2 default_server;
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/angie/.htpasswd;
	 ssl_verify_client off;
        ssl_certificate /certs/self_public;
        ssl_certificate_key /certs/self_private;
        location /console/ {
            auto_redirect on;
            status_zone console_stats;
            alias /usr/share/angie-console-light/html/;
            index index.html;
            location /console/api/ {
                api /status/;
            }
        }
        location /p8s/ {
            prometheus all;
            status_zone console_prom_stats;
        }
	    location /stream/ {
            #auth_basic "off";
            proxy_pass http://172.17.0.1:64200/stream/;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "https";
            status_zone torrserver_/stream/_https_stats;
	    }
        if ($http_referer ~ ^http?://aeza.runalsh.ru*/ts/) {
            rewrite ^ /ts$uri;
        }
        location /ts/ {
            proxy_pass http://172.17.0.1:64200/;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "https";
            status_zone torrserver_/ts/_https_stats;
        }
        location / {
            proxy_pass http://172.17.0.1:64200/;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "https";
            status_zone torrserver_/_https_stats;
	 }
    }
    server {
        listen 9001 http2;
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/angie/.htpasswd;
	     location /stream/ {
            #auth_basic "off";
            proxy_pass http://172.17.0.1:64200/stream/;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "http";
            status_zone torrserver_/stream/_http_stats;
        }
        if ($http_referer ~ ^http?://aeza.runalsh.ru*/ts/) {
            rewrite ^ /ts$uri;
        }
        location /ts/ {
            proxy_pass http://172.17.0.1:64200/;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "http";
            status_zone torrserver_/ts/_http_stats;
        }
        location / {
            proxy_pass http://172.17.0.1:64200/;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "http";
            status_zone torrserver_/_http_stats;
	    }
    }	
}

stream {
    upstream other {
        zone upstream 256k;
        server ng:443;
    }

    upstream reality {
        zone upstream 256k;
        server xr:443;
    }

    upstream ocserv {
        zone upstream 256k;
        server oc:443;
    }

    upstream naive {
        zone upstream 256k;
        server np:443;
    }

    map_hash_bucket_size 128;
    map $ssl_preread_server_name $sni_name {
        #domain
        www.microsoft.com reality;
        #domain

        #ocserv
        #oc.domain ocserv;
        #ocserv

        #naive
        #np.domain naive;
        #naive
        default other;
    }

    server {
        listen          443 reuseport;
        proxy_pass      $sni_name;
        proxy_protocol  on;
        ssl_preread     on;
        status_zone stream_tcp;
    }

    server {
        listen          443 udp;
        proxy_pass      $sni_name;
        proxy_protocol  on;
        ssl_preread     on;
        status_zone stream_udp;
    }
}
